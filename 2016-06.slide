2 años de gorutinas
Buenas prácticas y errores frecuentes
Tags: golang


Ángel Del Castillo
http://github.com/jimmy-go/talkslide

jubu201504@gmail.com

* Go

.link https://golang.org/doc

The Go programming language is an open source project to make *programmers* *more* *productive*

Go is expressive, concise, clean, and efficient. Its *concurrency* mechanisms make it easy to write programs that get the most out of multicore and networked machines, while its novel type system enables flexible and modular program construction. Go *compiles* *quickly* to machine code yet has the convenience of *garbage* *collection* and the power of run-time reflection. It's a fast, *statically* *typed*, compiled language that feels like a dynamically typed, interpreted language.

* Aprende Go idiomático
* 

.link https://golang.org/doc/effective_go.html

Idiomatic
.code good.go

Don't do that!
.code bad.go

* No apliques paradigmas de otros lenguajes (tan pronto)
* 
La experiencia te dice que usar frameworks es *el* *modo*.

En Go es preferible usar la librería estándar ya que es muy potente. En caso de necesitar algo más complejo mira en los toolkits disponibles.

lib > toolkits > framework

.link github.com/gorilla

Los frameworks no son malos. Pero es buena idea que el framework que uses armonice con la filosofía de Go.

* Inicia todo en main
* 

- Todos los paquetes main que tienen una función main() generan un binario.

.code mymain.go

- init() es llamado antes que main() evita usarlo para iniciar configuraciones.

* Usar flags hace más fácil entender el código.

.code flags.go

* Y se pueden combinar con variables de entorno.

    // construir el binario
    go build -race -o example1
-

    // archivo envs_production.sh
    export PORT=9000
    export DB_HOST=domain1.com
    export DB_DATABASE=production_db
-

    // cargamos las variables de entorno y ejecutamos.
    source envs_production.sh
    example1 \
    -port=$PORT \
    -db-host=$DB_HOST \
    -db-database=$DB_DATABASE

* 
- Tu código debe leerse como un libro.
    animals/
        eagle.go
        eagle_test.go
        cow.go
        cow_test.go
        snake.go
        snake_test.go
- Cuando generes documentación concentrate en el *WHY* en lugar del *HOW*

.code animals.go

- Haz pruebas unitarias; y benchmarks.

* Evita `go run` usa `go build`
* Las gorutinas son baratas... pero no lances 50K

.image images/fig1.png 

Y ciérralas...
Recuerda que tu código debe responder rápido la mayor cantidad de peticiones posibles. Pero algunos recursos como conexiones a base de datos son caros.

* La dulcería del cine
* 

.image images/cine_fila_1.jpg

* 

.image images/cine_fila_2.jpg

* Hay muchas herramientas que te ayudan a generar código de calidad.

    - Editor > IDE (IMO)
    - syntax off (IMO)
    - go fmt | vet | coverage
    - golint
    - godef
    - YCM
    - go-fuzz
    - etc...

.image images/fig2.jpg

* Los inolvidables

- Olvida el debugger, usa el log.

    Controller : Index : filter users : err [%s] param1 [%v] param2 [%v]

- Pruebas de stress y de carga

- Métricas (prometheus, promdash, influxdb, etc...)

- git flow

- htop

.image images/pic3.jpg

* Comunidad

.image images/pic2.png
